---
- name: Include OS family-specific variables
  include_vars: "{{ ansible_facts.os_family }}.yml"

- name: Ensure required packages are installed
  package:
    name: "{{ (os_images_package_dependencies + os_images_package_dependencies_extra) | select | list }}"
    state: present
  become: True

# The rpm-distro element executes 'semanage' during its cleanup phase.
- name: Ensure diskimage-builder SELinux dependencies are installed
  vars:
    package_name: "{{ 'policycoreutils-python' if ansible_facts.distribution_major_version | int == 7 else 'python3-policycoreutils' }}"
  package:
    name: "{{ package_name }}"
    state: present
  when:
    - ansible_facts.selinux
    - "ansible_facts.selinux.status != 'disabled'"
    - ansible_facts.os_family == "RedHat"
  become: True

- name: Ensure download cache dir exists
  file:
    path: "{{ os_images_cache }}"
    owner: "{{ ansible_facts.user_uid }}"
    group: "{{ ansible_facts.user_gid }}"
    state: directory
  become: True

- name: Remove old images for force rebuild
  file:
    path: "{{ os_images_cache }}/{{ item.name }}"
    state: absent
  when: item.force_rebuild | default(os_images_force_rebuild) | bool
  with_items: "{{ os_images_list }}"
  tags: clean

- name: Generate per-image cache directories
  file:
    path: "{{ os_images_cache }}/{{ item.name }}"
    owner: "{{ ansible_facts.user_uid }}"
    group: "{{ ansible_facts.user_gid }}"
    state: directory
  with_items: "{{ os_images_list }}"
  become: True

- block:
    - name: Download the image to the directory when an image_url is defined
      get_url:
        url: "{{ item.image_url }}"
        dest: "{{ image_dest }}"
        checksum: "{{ item.checksum | default(omit) }}"
      with_items: "{{ os_images_list }}"
    - name: Unpack the image if .xz format
      command: unxz --keep --force {{ image_dest }}
      when: image_is_xz
      with_items: "{{ os_images_list }}"
  vars:
    image_dest: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.{{ item.type | default('qcow2') }}{{ '.xz' if image_is_xz else '' }}"
    image_is_xz: "{{ item.image_url.endswith('.xz') }}"
  when: item.image_url is defined

- name: Install a suitable version of diskimage-builder
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version or omit }}"
    state: "{{ os_images_package_state }}"
    virtualenv: "{{ os_images_dib_venv }}"
    extra_args: "{% if os_images_dib_upper_constraints_file %}-c {{ os_images_dib_upper_constraints_file }}{% endif %}"
  with_items:
    - name: "{{ os_images_dib_pkg_name }}"
      version: "{{ os_images_dib_version }}"

- name: Git clone any additional image element repos
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.local }}"
    version: "{{ item.version | default('HEAD') }}"
  with_items: "{{ os_images_git_elements }}"

- name: Set a fact containing paths to DIB elements
  set_fact:
    os_images_elements_path: "{{ os_images_elements }}"

- name: Incorporate git-sourced DIB elements
  set_fact:
    os_images_elements_path: >
      {{ os_images_elements_path +
         [item.local ~ '/' ~ item.elements_path] }}
  with_items: "{{ os_images_git_elements }}"
  when: item.elements_path is defined

- name: Set a fact containing the default DIB environment
  set_fact:
    os_image_dib_env_default:
      ELEMENTS_PATH: "{{ os_images_elements_path | join(':') }}"

- name: Generate diskimage-builder images
  vars:
    dib_args: >-
      {% if item.size is defined %}--image-size {{ item.size }}{% endif %}
      {% if item.type is defined %}-t {{ item.type }}{% endif %}
      {% if item.packages | default %}-p {{ item.packages | join(',') }}{% endif %}
      {{ os_images_common }}
      {{ item.elements | join( ' ' ) }}
      -o {{ item.name }}
  shell: ". {{ os_images_dib_venv }}/bin/activate && disk-image-create {{ dib_args }} > {{ item.name }}.stdout 2> {{ item.name }}.stderr"
  args:
    chdir: "{{ os_images_cache }}/{{ item.name }}"
    creates: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.d/dib-manifests"
  environment: "{{ os_image_dib_env_default | combine(item.env | default({})) }}"
  with_items: "{{ os_images_list }}"
  failed_when: false
  register: result
  # The output of this command can be quite large, and is not very useful as
  # a JSON blob.
  when: item.elements is defined

- name: Fail if any images failed to build
  fail:
    msg: >
      Image {{ item.0.name }} failed to build. See
      {{ item.0.name }}.stdout and {{ item.0.name }}.stderr in
      {{ os_images_cache }}/{{ item.0.name }}.
  when:
    - item.0.elements is defined
    - item.1.rc != 0
  with_together:
    - "{{ os_images_list }}"
    - "{{ result.results }}"
