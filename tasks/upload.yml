---
- name: Ensure existing cloud tenant kernel does not exist
  os_image:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    name: "{{ item.name ~ '-kernel' }}"
    state: absent
  with_items: "{{ os_images_list }}"
  when:
    - item.elements is defined
    - '"baremetal" in item.elements'
    - item.force_rebuild | default(os_images_force_rebuild) | bool
  tags: clean

- name: Upload cloud tenant kernel for baremetal images
  os_image:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    name: "{{ item.name ~ '-kernel' }}"
    state: present
    is_public: "{{ item.is_public | default(os_images_public) | bool }}"
    container_format: aki
    disk_format: aki
    filename: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.vmlinuz"
  with_items: "{{ os_images_list }}"
  when:
    - item.elements is defined
    - '"baremetal" in item.elements'
  register: kernel_result

- name: Ensure existing cloud tenant ramdisk does not exist
  os_image:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    name: "{{ item.name ~ '-ramdisk' }}"
    state: absent
  with_items: "{{ os_images_list }}"
  when:
    - item.elements is defined
    - '"baremetal" in item.elements'
    - item.force_rebuild | default(os_images_force_rebuild) | bool
  tags: clean

- name: Upload cloud tenant ramdisk for baremetal images
  os_image:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    name: "{{ item.name ~ '-ramdisk' }}"
    state: present
    is_public: "{{ item.is_public | default(os_images_public) | bool }}"
    container_format: ari
    disk_format: ari
    filename: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.initrd"
  with_items: "{{ os_images_list }}"
  when:
    - item.elements is defined
    - '"baremetal" in item.elements'
  register: ramdisk_result

- name: Ensure existing cloud tenant image does not exist
  os_image:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    name: "{{ item.name }}"
    state: absent
  with_items: "{{ os_images_list }}"
  when: item.force_rebuild | default(os_images_force_rebuild) | bool
  tags: clean

- name: Ensure old images are renamed
  command: >
            {{ os_images_venv }}/bin/openstack image set {{ item.name }} --name {{ item.name }}.{{ extension }}
  vars:
    extension: "ansible_date_time.date"
  with_items:
    - "{{ os_images_list }}"
  when: item.rename_image | default(os_images_rename_image) | bool
  environment: "{{ os_images_venv }}"

- name: Upload cloud tenant images
  os_image:
    auth_type: "{{ os_images_auth_type }}"
    auth: "{{ os_images_auth }}"
    cacert: "{{ os_images_cacert | default(omit) }}"
    interface: "{{ os_images_interface | default(omit, true) }}"
    name: "{{ item.0.name }}"
    state: present
    is_public: "{{ item.0.is_public | default(os_images_public) | bool }}"
    owner: "{{ item.0.owner | default(omit) }}"
    container_format: bare
    disk_format: "{{ item.0.type | default('qcow2') }}"
    filename: "{{ os_images_cache }}/{{ item.0.name }}/{{ item.0.name }}.{{ item.0.type | default('qcow2') }}"
    properties: "{{ os_images_common_properties | combine(item.0.properties | default({})) or omit }}"
    kernel: "{{ item.1.id if is_baremetal else omit }}"
    ramdisk: "{{ item.2.id if is_baremetal else omit }}"
  vars:
    is_baremetal: "{{ item.0.elements is defined and 'baremetal' in item.0.elements }}"
  with_together:
    - "{{ os_images_list }}"
    - "{{ kernel_result.results }}"
    - "{{ ramdisk_result.results }}"

- name: Ensure rc images are renamed
  command: >
            {{ os_images_venv }}/bin/openstack image set {{ item.name }} --name {{ item.name[:-3] }}
  with_items:
    - "{{ os_images_list }}"
  when: item.rename_image | default(os_images_rename_image) | bool
  environment: "{{ os_images_venv }}"
